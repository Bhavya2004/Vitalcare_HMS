import multer from 'multer';
import path from 'path';

/**
 * Configures the storage engine for handling file uploads using multer.
 * 
 * The storage engine is set to `diskStorage`, which saves files to the local file system.
 * 
 * - `destination`: Specifies the directory where uploaded files will be stored.
 * 
 * - `filename`: Determines the name of the uploaded file.
 *   - A unique filename is generated by appending a timestamp and a random number
 *     to the original file's extension to avoid naming conflicts.
 * 
 * @param req - The HTTP request object.
 * @param file - The uploaded file object containing metadata about the file.
 * @param cb - A callback function to signal completion of the destination or filename setup.
 */
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); 
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now().toString() + '-' + Math.round(Math.random() * 1e9).toString();
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});

/**
 * Middleware for handling image file uploads using Multer.
 *
 * This middleware is configured with the following options:
 * - `storage`: Specifies the storage engine to use for uploaded files.
 * - `limits`: Sets a file size limit of 5MB for uploaded files.
 * - `fileFilter`: Filters uploaded files to allow only image files based on their MIME type.
 *
 * @throws {Error} If the uploaded file is not an image, an error is passed to the callback.
 */
export const upload = multer({
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed!'));
    }
  },
});
