// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  NURSE
  DOCTOR
  LAB_TECHNICIAN
  PATIENT
  CASHIER
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum JOBTYPE {
  FULL
  PART
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PAID
  UNPAID
  PART
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  firstName String?
  lastName  String?
  role      Role    @default(PATIENT) // Role of the user (e.g., ADMIN, DOCTOR, etc.)
  status    Status  @default(ACTIVE) // Account status (e.g., ACTIVE, INACTIVE)
  notifications Notification[]

  // Relation to Patient model
  patient Patient?
  //Relation to Doctor model
  doctor  Doctor?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Patient {
  id                       String        @id @default(uuid())
  user_id                  String        @unique // Reference to User table
  user                     User          @relation(fields: [user_id], references: [id])
  first_name               String
  last_name                String
  date_of_birth            DateTime
  gender                   Gender        @default(MALE)
  phone                    String
  email                    String        @unique
  marital_status           String
  address                  String
  emergency_contact_name   String
  emergency_contact_number String
  relation                 String
  blood_group              String?
  allergies                String?
  medical_conditions       String?
  medical_history          String?
  insurance_provider       String?
  insurance_number         String?
  privacy_consent          Boolean
  service_consent          Boolean
  medical_consent          Boolean
  img                      String?
  colorCode                String?
  appointments             Appointment[]
  medical                  MedicalRecords[]
  payments                 Payment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Doctor {
  id                  String        @id @default(uuid())
  user_id             String?        @unique
  user                User?          @relation(fields: [user_id], references: [id])
  email               String        @unique
  name                String
  specialization      String
  license_number      String
  phone               String
  address             String
  department          String?
  img                 String?
  colorCode           String?
  availability_status String?
  type                JOBTYPE       @default(FULL)
  working_days        WorkingDays[]
  appointments        Appointment[]
  diagnosis           Diagnosis[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model WorkingDays {
  id         Int    @id @default(autoincrement())
  doctor_id  String
  day        String
  start_time String
  close_time String

  doctor Doctor @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Appointment {
  id               Int               @id @default(autoincrement())
  patient_id       String
  doctor_id        String
  appointment_date DateTime
  time             String
  status           AppointmentStatus @default(PENDING)
  type             String
  note             String?
  patient          Patient           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor           Doctor            @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  reason           String?
  medical          MedicalRecords?
  payment          Payment?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
}

model MedicalRecords {
  id             Int          @id @default(autoincrement())
  patient_id     String
  appointment_id Int          @unique
  doctor_id      String
  treatment_plan String?
  prescriptions  String?
  lab_request    String?
  notes          String?
  appointment    Appointment  @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient        Patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  vital_signs    VitalSigns[]
  diagnosis      Diagnosis[]
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
}

model VitalSigns {
  id                Int      @id @default(autoincrement())
  medical_id        Int
  medical           MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)
  body_temperature  Float
  systolic          Int
  diastolic         Int
  heart_rate        String
  respiratory_rate  Int?
  oxygen_saturation Int?
  weight            Float
  height            Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Diagnosis {
  id              Int      @id @default(autoincrement())
  patient_id      String
  medical_id      Int
  doctor_id       String
  doctor          Doctor    @relation(fields: [doctor_id], references: [id])
  symptoms        String    
  diagnosis       String    
  notes           String?   
  prescribed_medications String?   
  follow_up_plan   String?
  medical         MedicalRecords @relation(fields: [medical_id ], references: [id], onDelete: Cascade)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model Services {
  id             Int    @id @default(autoincrement())
  service_name   String
  description    String
  price          Float
  bills          PatientBills[]
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model PatientBills {
  id              Int      @id @default(autoincrement())
  bill_id         Int
  service_id      Int
  service_date    DateTime
  quantity        Int
  unit_cost       Float
  total_cost      Float
  service         Services @relation(fields: [service_id], references: [id])
  payment         Payment  @relation(fields: [bill_id], references: [id], onDelete: Cascade)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Payment {
  id              Int      @id @default(autoincrement())
  bill_id         Int?
  patient_id      String
  appointment_id  Int      @unique
  bill_date       DateTime
  payment_date    DateTime
  discount        Float
  total_amount    Float
  amount_paid     Float
  payment_method  PaymentMethod @default(CASH)
  status          PaymentStatus @default(UNPAID)
  receipt_number  Int      @default(autoincrement())
  appointment     Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient         Patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  bills           PatientBills[]
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}


